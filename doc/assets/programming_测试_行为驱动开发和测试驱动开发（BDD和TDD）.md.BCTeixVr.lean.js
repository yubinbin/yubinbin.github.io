import{_ as t,c as a,a2 as r,o}from"./chunks/framework.CqbvlPrP.js";const e="/assets/img/program/%E6%B5%8B%E8%AF%95/1.png",D="/assets/img/program/%E6%B5%8B%E8%AF%95/2.jpg",n="/assets/img/program/%E6%B5%8B%E8%AF%95/3.jpg",h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"programming/测试/行为驱动开发和测试驱动开发（BDD和TDD）.md","filePath":"programming/测试/行为驱动开发和测试驱动开发（BDD和TDD）.md"}'),i={name:"programming/测试/行为驱动开发和测试驱动开发（BDD和TDD）.md"};function s(l,p,d,g,m,_){return o(),a("div",null,p[0]||(p[0]=[r('<h3 id="行为驱动开发和测试驱动开发-bdd和tdd" tabindex="-1">行为驱动开发和测试驱动开发（BDD和TDD） <a class="header-anchor" href="#行为驱动开发和测试驱动开发-bdd和tdd" aria-label="Permalink to &quot;行为驱动开发和测试驱动开发（BDD和TDD）&quot;">​</a></h3><h4 id="一、-bdd和tdd介绍" tabindex="-1">一、 BDD和TDD介绍 <a class="header-anchor" href="#一、-bdd和tdd介绍" aria-label="Permalink to &quot;一、 BDD和TDD介绍&quot;">​</a></h4><p><strong>BDD：</strong> Behavior Driven Development，行为驱动开发是一种敏捷软件开发的技术，它鼓励软件项目中的开发者、QA和非技术人员或商业参与者之间的协作。</p><p><strong>TDD：</strong> Test-Driven Development(TDD)即测试驱动开发，它是一种测试先于编写代码的思想用于指导软件开发。</p><p>测试驱动开发是敏捷开发中的一项核心实践和技术，也是一种设计方法论。</p><p><strong>TDD的原理是在开发功能代码之前，先编写单元测试用例代码，测试代码确定需要编写什么产品代码。</strong></p><p>它的工作流程如下所示： <img src="'+e+'" alt="工作流程"></p><h4 id="二、tdd方法的一些特点" tabindex="-1">二、TDD方法的一些特点： <a class="header-anchor" href="#二、tdd方法的一些特点" aria-label="Permalink to &quot;二、TDD方法的一些特点：&quot;">​</a></h4><blockquote><p>有利于更加专注软件设计； 清晰地了解软件的需求； 很好的诠释了代码即文档。</p></blockquote><p><strong>测试不仅仅是一种对于代码的验证，找出几个bug或者一些诸如压力测试、负载测试，更是一种约束，一种规范，是与项目需求息息相关，还需要沟通协调客户、开发人员以及QA，从而帮助更加高效的完成软件设计开发工作。</strong></p><p>通过下面一幅图就可以发现对于测试也有不同的层次和流程： <img src="'+D+'" alt="测试的层次和流程"></p><p>从图中可以发现，最下面的是单元测试（白盒测试），主要用于测试开发人员编写的代码是否正确，这部分工作都是开发人员自己来做的。通常而言，一个单元测试是用于判断某个特定条件（或者场景）下某个特定函数的行为。</p><p>再往上，就是BDD（灰盒测试、黑盒测试），主要用于测试代码是否符合客户的需求，这里的BDD更加侧重于代码的功能逻辑。</p><p>从左边的范畴也可以看出，测试的范围也是逐层扩大，从单元测试的类到BDD里面的服务、控制器等，再到最上层的模拟实际操作场景的Selenium。对于包括UI界面的测试。</p><p>之前自己有做过这样的编码测试工作，通过写代码，可以打开IE、FF等浏览器，模拟用户点击、填写数据等操作，从而完成一整套的流程测试。</p><p><strong>整个测试从小到大，从函数、方法、类到功能模块乃至系统有着一系列严谨的体系</strong>。</p><h4 id="三、bdd的一些特点" tabindex="-1">三、BDD的一些特点： <a class="header-anchor" href="#三、bdd的一些特点" aria-label="Permalink to &quot;三、BDD的一些特点：&quot;">​</a></h4><p>BDD是一种敏捷软件开发的技术。它对TDD的理念进行了扩展，在TDD中侧重点偏向开发，通过测试用例来规范约束开发者编写出质量更高、bug更少的代码。</p><p><strong>而BDD更加侧重设计，其要求在设计测试用例的时候对系统进行定义，倡导使用通用的语言将系统的行为描述出来，将系统设计和测试用例结合起来，从而以此为驱动进行开发工作。</strong></p><p>BDD的通用语言是一种近乎自然语言的描述软件的形式。</p><p>传统的开发模式中，客户很难从技术层面理解问题，开发人员很难从业务需求考虑问题，基于这种通用语言形式可以尽可能的避免客户和开发者在沟通上的障碍，实现客户和开发者同时定义系统的需求。</p><p>避免了因为理解需求不充分而带来的不必必要的工作量。</p><p><strong>BDD描述的行为就像一个个的故事(Story)，系统业务专家、开发者、测试人员一起合作，分析软件的需求，然后将这些需求写成一个个的故事。</strong></p><p>开发者负责填充这些故事的内容，测试者负责检验这些故事的结果。</p><p>通常，会使用一个故事的模板来对故事进行描述</p><p>Story：</p><ol><li>As a 角色</li><li>I want 特征</li><li>so that 利益</li></ol><p>As a标识出这个系统行为是为哪一个角色而定义的。</p><p>I want和so that则指明了该角色想做的事， 以及想达到的目的。</p><p>这三个断句定义了这个系统行为的参与者、范围。</p><p>同样的一个Story，可能会有不同的场景。通过上面的模板描述了故事之后，再通过下面的模板对不同场景进行描述</p><p>Scenario:</p><ol><li><p>Given [上下文]</p></li><li><p>And[更多的上下文]</p></li><li><p>When[事件]</p></li><li><p>Then[结果]</p></li><li><p>And[其他结果]</p></li></ol><p>这些场景中的Given…When…Then…实际上就是设定该场景的状态、适用的事件，以及场景的执行结果。</p><p>其实通过这样的Story描述和场景设置，基本就完成了一个完整测试的定义。</p><p>BDD整个测试流程如图所示： <img src="'+n+'" alt="工作流程"></p>',36)]))}const B=t(i,[["render",s]]);export{h as __pageData,B as default};
