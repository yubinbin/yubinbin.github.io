import{_ as t,c as p,a2 as n,j as i,a,G as l,w as o,B as r,o as h}from"./chunks/framework.CqbvlPrP.js";const C=JSON.parse('{"title":"常用命令","description":"","frontmatter":{},"headers":[],"relativePath":"programming/node/nvm.md","filePath":"programming/node/nvm.md"}'),d={name:"programming/node/nvm.md"};function k(g,s,m,F,u,c){const e=r("version");return h(),p("div",null,[s[5]||(s[5]=n(`<h1 id="常用命令" tabindex="-1">常用命令 <a class="header-anchor" href="#常用命令" aria-label="Permalink to &quot;常用命令&quot;">​</a></h1><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>nvm install 4.2.2</span></span>
<span class="line"><span>nvm ls available</span></span>
<span class="line"><span>nvm use 4.2.2</span></span></code></pre></div><h1 id="在多环境中-npm该如何使用呢" tabindex="-1">在多环境中，npm该如何使用呢？ <a class="header-anchor" href="#在多环境中-npm该如何使用呢" aria-label="Permalink to &quot;在多环境中，npm该如何使用呢？&quot;">​</a></h1>`,3)),i("p",null,[s[1]||(s[1]=a("每个版本的 Node 都会自带一个不同版本的 npm，可以用 npm -v 来查看 npm 的版本。 ")),s[2]||(s[2]=i("strong",null,"全局安装的 npm 包并不会在不同的 Node 环境中共享",-1)),s[3]||(s[3]=a("，因为这会引起兼容问题。它们被放在了不同版本的目录下， 例如 ~/.nvm/versions/node/")),l(e,null,{default:o(()=>s[0]||(s[0]=[a("/lib/node_modules")])),_:1}),s[4]||(s[4]=a(" 这样的目录。这刚好也省去我们在 Linux 中使用 sudo 的功夫了。因为这是用户的主文件夹，并不会引起权限问题。"))]),s[6]||(s[6]=n(`<p><strong>但问题来了，我们安装过的 npm 包，都要重新再装一次？</strong></p><p>在终端输入</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">npm config set prefix </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;D:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\P</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">rogram Files</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">vm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ode_global&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">，</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 其中D:\\nvm\\node_global为你的node_global文件夹路径。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// D:\\nvm\\node_cache 为你的缓存路径 。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">npm config set cache </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;D:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\P</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">rogram Files</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">vm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ode_cache&quot;</span></span></code></pre></div><p><strong>然后就可以使用了，之后每次切换node版本都要设置一下</strong></p>`,4))])}const y=t(d,[["render",k]]);export{C as __pageData,y as default};
