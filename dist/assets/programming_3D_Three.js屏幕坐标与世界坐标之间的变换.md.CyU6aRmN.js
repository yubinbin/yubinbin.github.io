import{_ as a,c as n,a2 as p,o as e}from"./chunks/framework.CqbvlPrP.js";const t="/assets/img/program/3D/threejs%E5%B1%8F%E5%B9%95%E5%9D%90%E6%A0%87%E4%B8%8E%E4%B8%96%E7%95%8C%E5%9D%90%E6%A0%87%E4%B9%8B%E9%97%B4%E7%9A%84%E8%BD%AC%E6%8D%A2/1.jpg",i="/assets/img/program/3D/threejs%E5%B1%8F%E5%B9%95%E5%9D%90%E6%A0%87%E4%B8%8E%E4%B8%96%E7%95%8C%E5%9D%90%E6%A0%87%E4%B9%8B%E9%97%B4%E7%9A%84%E8%BD%AC%E6%8D%A2/2.jpg",c="/assets/img/program/3D/threejs%E5%B1%8F%E5%B9%95%E5%9D%90%E6%A0%87%E4%B8%8E%E4%B8%96%E7%95%8C%E5%9D%90%E6%A0%87%E4%B9%8B%E9%97%B4%E7%9A%84%E8%BD%AC%E6%8D%A2/3.jpg",E="/assets/img/program/3D/threejs%E5%B1%8F%E5%B9%95%E5%9D%90%E6%A0%87%E4%B8%8E%E4%B8%96%E7%95%8C%E5%9D%90%E6%A0%87%E4%B9%8B%E9%97%B4%E7%9A%84%E8%BD%AC%E6%8D%A2/4.jpg",o="/assets/img/program/3D/threejs%E5%B1%8F%E5%B9%95%E5%9D%90%E6%A0%87%E4%B8%8E%E4%B8%96%E7%95%8C%E5%9D%90%E6%A0%87%E4%B9%8B%E9%97%B4%E7%9A%84%E8%BD%AC%E6%8D%A2/5.png",l="/assets/img/program/3D/threejs%E5%B1%8F%E5%B9%95%E5%9D%90%E6%A0%87%E4%B8%8E%E4%B8%96%E7%95%8C%E5%9D%90%E6%A0%87%E4%B9%8B%E9%97%B4%E7%9A%84%E8%BD%AC%E6%8D%A2/6.png",r="/assets/img/program/3D/threejs%E5%B1%8F%E5%B9%95%E5%9D%90%E6%A0%87%E4%B8%8E%E4%B8%96%E7%95%8C%E5%9D%90%E6%A0%87%E4%B9%8B%E9%97%B4%E7%9A%84%E8%BD%AC%E6%8D%A2/7.jpg",v=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"programming/3D/Three.js屏幕坐标与世界坐标之间的变换.md","filePath":"programming/3D/Three.js屏幕坐标与世界坐标之间的变换.md"}'),g={name:"programming/3D/Three.js屏幕坐标与世界坐标之间的变换.md"};function m(B,s,d,h,D,_){return e(),n("div",null,s[0]||(s[0]=[p('<p>Three.js屏幕坐标与世界坐标之间的变换</p><p>0、渲染管线中坐标系变换:</p><p>局部坐标 -&gt; 世界坐标 -&gt; 观察空间坐标 -&gt; 裁剪空间坐标 -&gt; NDC坐标 -&gt; 屏幕空间坐标</p><p><img src="'+t+'" alt="img"></p><p>1、浏览器屏幕坐标系(canvas坐标)，原点在左上角,注意和PC客户端的屏幕坐标系Y轴是翻转的 <img src="'+i+'" alt="img"></p><p>2、PC客户端屏幕坐标系，即通常非web渲染中的，也是OpenGL中默认的屏幕坐标系，原点在左下角</p><p><img src="'+c+'" alt="img"></p><p>3、NDC坐标系（二维）,OpenGL中NDC的Z轴由屏幕向内,即左手坐标系,原点在中心</p><p><img src="'+E+`" alt="img"></p><p>4、1和3合起来看</p><p>5、假设画布canvas的高为h, 宽为w, 且坐标系中有一点(x, y), 这一点在NDC中为(x1, y1), 那么转换公式为:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>x1=(x/w)∗2−1</span></span>
<span class="line"><span></span></span>
<span class="line"><span>y1=−(y/h)∗2+1</span></span></code></pre></div><p>canvas的宽高根据具体设定决定, 比如全屏时是window.innerWidth和window.innerHeight , 如果canvas有偏移量,那么往往是canvas.offsetWidth和canvas.offsetHeight</p><p>6、5的推导如下:</p><p>①首先根据4, 世界空间中的坐标与屏幕关系如下(即4中红色原点与画布长宽):</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>cx = w / 2</span></span>
<span class="line"><span></span></span>
<span class="line"><span>cy = h / 2</span></span></code></pre></div><p>②那么，屏幕坐标系中的点 ( x&#39;, y&#39; )应用这个原点 ( cx ,cy )后的表示为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>x′ = x − cx</span></span>
<span class="line"><span></span></span>
<span class="line"><span>y′ = cy − y （因为这两个坐标系的 y 轴方向是相反的）</span></span></code></pre></div><p>③然后再将 ( x ′ , y ′ )标准化到[-1, 1]之间，也就是分别除以cx ,c y ： <img src="`+o+'" alt="img"></p><p>同理:</p><p><img src="'+l+`" alt="img"> 7、 用代码表示threejs中屏幕坐标转世界坐标</p><p>假设有鼠标单击事件</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>const x = event.clientX;//鼠标单击坐标X</span></span>
<span class="line"><span>const y = event.clientY;//鼠标单击坐标Y</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 屏幕坐标转标准设备坐标</span></span>
<span class="line"><span>const x1 = ( x / window.innerWidth ) * 2 - 1;</span></span>
<span class="line"><span>const y1 = -( y / window.innerHeight ) * 2 + 1;</span></span>
<span class="line"><span>//标准设备坐标(z=0.5这个值比较靠经验)</span></span>
<span class="line"><span>const stdVector = new Vector3(x1, y1, 0.5);</span></span>
<span class="line"><span>//世界坐标</span></span>
<span class="line"><span>const worldVector = stdVector.unproject(camera);</span></span></code></pre></div><p>8、 世界坐标转屏幕坐标, 将5公式反着推即可, 即 <img src="`+r+'" alt="img"></p>',24)]))}const C=a(g,[["render",m]]);export{v as __pageData,C as default};
