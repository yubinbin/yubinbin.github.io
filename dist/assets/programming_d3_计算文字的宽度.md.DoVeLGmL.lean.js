import{_ as e,c as a,a2 as s,o as n}from"./chunks/framework.CqbvlPrP.js";const x=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"programming/d3/计算文字的宽度.md","filePath":"programming/d3/计算文字的宽度.md"}'),p={name:"programming/d3/计算文字的宽度.md"};function o(c,t,i,d,l,r){return n(),a("div",null,t[0]||(t[0]=[s(`<h3 id="计算-d3-选择器选择的-svg-text-宽度" tabindex="-1">计算 D3 选择器选择的 svg text 宽度 <a class="header-anchor" href="#计算-d3-选择器选择的-svg-text-宽度" aria-label="Permalink to &quot;计算 D3 选择器选择的 svg text 宽度&quot;">​</a></h3><p>最近项目中，使用 d3 append text 添加文本，text 中用 tspan 分别承载内容，外面用一个 rect 框住。思路是 rect 的宽度根据所有 tspan 的最大宽度定。</p><p>一开始使用 canvas 计算 text 文本的宽度，但是计算出来的宽度比实际宽度小，也没有找出是什么原因。 后面查到 svg 的 text 有计算宽度的 API：getComputedTextLength，遂使用它。</p><p>使用的时候，直接用 d3.select(&#39;xxx&#39;).getComputedTextLength()，提示 getComputedTextLength not defined。经过一番查找，需要使用 selection.node() 获得选择的元素，在元素上面才有绑定 API。</p><p>以下是代码：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// 获取 tspan 宽度</span></span>
<span class="line"><span>d3.select(&#39;tspan&#39;).node().getComputedTextLength()</span></span></code></pre></div><p>使用 canvas 计算文本宽度的也记录一个：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>getTextWidth(text, font) {</span></span>
<span class="line"><span>    const canvas = this.getTextWidth.canvas || (this.getTextWidth.canvas = document.createElement(&quot;canvas&quot;));</span></span>
<span class="line"><span>    const context = canvas.getContext(&quot;2d&quot;);</span></span>
<span class="line"><span>    context.font = font || &#39;14px&#39;</span></span>
<span class="line"><span>    const metrics = context.measureText(text);</span></span>
<span class="line"><span>    return metrics.width;</span></span>
<span class="line"><span>}</span></span></code></pre></div>`,8)]))}const h=e(p,[["render",o]]);export{x as __pageData,h as default};
