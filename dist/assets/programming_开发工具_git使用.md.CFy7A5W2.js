import{_ as s,c as a,a2 as t,o as e}from"./chunks/framework.CqbvlPrP.js";const l="/assets/img/program/git/git%E6%93%8D%E4%BD%9C%E6%B5%81%E7%A8%8B%E5%9B%BE.png",h="/assets/img/program/git/git%E6%93%8D%E4%BD%9C%E6%B5%81%E7%A8%8B%E5%9B%BE1.png",p="/assets/img/program/git/git%E6%93%8D%E4%BD%9C%E6%B5%81%E7%A8%8B%E5%9B%BE2.png",m=JSON.parse('{"title":"git 操作方法","description":"","frontmatter":{},"headers":[],"relativePath":"programming/开发工具/git使用.md","filePath":"programming/开发工具/git使用.md"}'),n={name:"programming/开发工具/git使用.md"};function d(o,i,g,c,r,k){return e(),a("div",null,i[0]||(i[0]=[t('<h1 id="git-操作方法" tabindex="-1">git 操作方法 <a class="header-anchor" href="#git-操作方法" aria-label="Permalink to &quot;git 操作方法&quot;">​</a></h1><p><img src="'+l+'" alt="img"></p><p><img src="'+h+'" alt="img"></p><p><img src="'+p+'" alt="img"></p><ol><li>git init 初始化git 管理仓库</li><li>git add XXX</li><li>git commit -m &quot;XXX&quot;</li><li>二三两句可以合成为 git commit -a -m “XXX”</li><li>git status 查看文件状态</li><li>git log --pretty=oneline 显示提交版本历史信息</li><li>git reflog 查看命令历史，以便确定要回到未来的哪个版本</li><li>git reset --hard HEAD^ 回到上一个提交的版本，HEAD^^ 上两个版本 HEAD~100 前一百个版本</li><li>git reset --hard 99972af 回到指定的版本 返回前面的版本</li><li>git diff HEAD -- ReadMe.md 查看工作区和版本库里面最新版本的区别</li><li>( git checkout -- ReadMe.md ) 或 git restore --staged ReadMe.md //从暂存区域把文件返回到工作空间</li><li>git rm --cached ReadMe.md 从版本库中删除该文件</li><li>git config core.ignorecase false 禁止忽略文件名称大小写</li></ol><h2 id="远程仓库" tabindex="-1">远程仓库 <a class="header-anchor" href="#远程仓库" aria-label="Permalink to &quot;远程仓库&quot;">​</a></h2><ol><li><p>第1步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有<code>id_rsa</code>和<code>id_rsa.pub</code>这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ssh-keygen</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rsa</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -C</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;youremail@example.com&quot;</span></span></code></pre></div></li><li><p>在github 上设置公钥</p></li><li><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> remote</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git@github.com:michaelliao/learngit.git</span></span></code></pre></div></li><li><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> master</span></span></code></pre></div></li><li><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> master</span></span></code></pre></div></li></ol><p>由于远程库是空的，我们第一次推送<code>master</code>分支时，加上了<code>-u</code>参数，Git不但会把本地的<code>master</code>分支内容推送的远程新的<code>master</code>分支，还会把本地的<code>master</code>分支和远程的<code>master</code>分支关联起来，在以后的推送或者拉取时就可以简化命令。</p><ol start="5"><li><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git@github.com:michaelliao/gitskills.git</span></span></code></pre></div></li></ol><p>还可以用<code>https://github.com/michaelliao/gitskills.git</code>这样的地址。实际上，Git支持多种协议，默认的<code>git://</code>使用ssh，但也可以使用<code>https</code>等其他协议。</p><p>使用<code>https</code>除了速度慢以外，还有个最大的麻烦是每次推送都必须输入口令，但是在某些只开放http端口的公司内部就无法使用<code>ssh</code>协议而只能用<code>https</code>。</p><h2 id="分支管理" tabindex="-1">分支管理 <a class="header-anchor" href="#分支管理" aria-label="Permalink to &quot;分支管理&quot;">​</a></h2><p>查看分支：<code>git branch</code></p><p>创建分支：<code>git branch &lt;name&gt;</code></p><p>切换分支：<code>git checkout &lt;name&gt;</code>或者<code>git switch &lt;name&gt;</code></p><p>创建+切换分支：<code>git checkout -b &lt;name&gt;</code>或者<code>git switch -c &lt;name&gt;</code></p><p>合并某分支到当前分支：<code>git merge &lt;name&gt;</code></p><p>删除分支：<code>git branch -d &lt;name&gt;</code></p><p>删除未合并的分支：git branch -D dev1</p><hr><p>有的时候会需要合并某个分支的一个提交信息，而不是全部的提交，那就不能单纯的进行merge。比如你在分支：branch1。需要合并master的最新的那个提交，但是不需要倒数第二及以前的提交数据。</p><p>首先，确保你当前在 branch1 分支上，可以使用以下命令来切换到 branch1 分支：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> checkout</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> branch1</span></span></code></pre></div><p>然后，找到你希望合并的第二次提交的提交哈希（commit hash）。你可以通过以下命令查看 master 分支上的提交历史：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> log</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --oneline</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> master</span></span></code></pre></div><p>这将显示 master 分支上的提交列表，复制你想要合并的提交的提交哈希。</p><p>接下来，使用 git cherry-pick 命令来选择性地将你想要的提交合并到 branch1 分支上。假设你要合并的提交哈希是 ABC123，那么命令将是：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cherry-pick</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ABC123</span></span></code></pre></div><p>执行该命令后，Git 将把该提交应用到 branch1分支上，而不会合并 master 分支的其他提交。</p><h2 id="注意事项" tabindex="-1">注意事项： <a class="header-anchor" href="#注意事项" aria-label="Permalink to &quot;注意事项：&quot;">​</a></h2><p>在执行 git cherry-pick 命令之前，确保你在 branch1 分支上，并且没有未提交的更改，以避免潜在的冲突。 在操作 Git 时，请确保备份重要数据或在新的副本上进行尝试，以避免不小心损坏仓库。</p><h2 id="切换分支而不提交未保存的更改" tabindex="-1">切换分支而不提交未保存的更改 <a class="header-anchor" href="#切换分支而不提交未保存的更改" aria-label="Permalink to &quot;切换分支而不提交未保存的更改&quot;">​</a></h2><p>在Git中，如果你想要切换分支而不提交未保存的更改，你可以使用stash功能暂时保存这些更改。以下是如何使用git stash的步骤：</p><p>使用<code>git stash</code>命令来暂时保存你的工作。这会创建一个新的stash，其中包含了所有未提交的更改，<strong>并将工作目录恢复到上次提交的状态</strong>。</p><p>切换到你想要切换的分支。</p><p>当你想要回到原来的工作状态并应用之前stash的更改时，可以使用<code>git stash pop</code>命令。这会应用最新的stash更改，并从stash列表中移除它。</p><p>如果你想要查看stash列表以决定要应用哪个stash，可以使用<code>git stash list</code>。</p><hr><h2 id="git-怎么查看那些文件冲突" tabindex="-1">git 怎么查看那些文件冲突 <a class="header-anchor" href="#git-怎么查看那些文件冲突" aria-label="Permalink to &quot;git 怎么查看那些文件冲突&quot;">​</a></h2><p>在Git中，查看哪些文件存在冲突，可以使用以下命令：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> diff</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name-only</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --diff-filter=U</span></span></code></pre></div><p>这个命令会列出所有处于未合并（unmerged）状态的文件路径。</p><p>如果你想要看到详细的冲突信息，可以使用：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> diff</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name-only</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span></span></code></pre></div><p>这将会显示每个冲突文件的详细内容，包括两个不同分支中的文件差异。</p><p>如果你已经有了一个合并失败的状态，并且想要查看冲突文件，可以使用：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> status</span></span></code></pre></div><p>这个命令会显示当前状态，包括哪些文件是未合并的（Untracked, Unmerged）。</p><p>要获取详细的冲突解决方案，你可以手动编辑这些文件，并解决内容上的不同。也可以使用图形化的工具，如 git mergetool，来帮助解决冲突。</p><p><strong>GitHub Gist: 68ed1941990eefbe2455edc0adb1b869</strong><strong>GitHub Access Token： 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</strong></p>',50)]))}const u=s(n,[["render",d]]);export{m as __pageData,u as default};
